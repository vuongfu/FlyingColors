@model TutorOnline.Web.Models.TransactionViewModels
@using TutorOnline.Common;
@{
    TranStringCommon TranString = new TranStringCommon();
    ViewBag.Title = TranString.CreateTitle;
    Layout = "~/Views/Shared/_Layout_BackendUser.cshtml";
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script>
    var mangso = ['không', 'một', 'hai', 'ba', 'bốn', 'năm', 'sáu', 'bảy', 'tám', 'chín'];

    function dochangchuc(so, daydu) {
        var chuoi = "";
        chuc = Math.floor(so / 10);
        donvi = so % 10;
        if (chuc > 1) {
            chuoi = " " + mangso[chuc] + " mươi";
            if (donvi == 1) {
                chuoi += " mốt";
            }
        } else if (chuc == 1) {
            chuoi = " mười";
            if (donvi == 1) {
                chuoi += " một";
            }
        } else if (daydu && donvi > 0) {
            chuoi = " lẻ";
        }
        if (donvi == 5 && chuc > 1) {
            chuoi += " lăm";
        } else if (donvi > 1 || (donvi == 1 && chuc == 0)) {
            chuoi += " " + mangso[donvi];
        }
        return chuoi;
    }

    function docblock(so, daydu) {
        var chuoi = "";
        tram = Math.floor(so / 100);
        so = so % 100;
        if (daydu || tram > 0) {
            chuoi = " " + mangso[tram] + " trăm";
            chuoi += dochangchuc(so, true);
        } else {
            chuoi = dochangchuc(so, false);
        }
        return chuoi;
    }

    function dochangtrieu(so, daydu) {
        var chuoi = "";
        trieu = Math.floor(so / 1000000);
        so = so % 1000000;
        if (trieu > 0) {
            chuoi = docblock(trieu, daydu) + " triệu";
            daydu = true;
        }
        nghin = Math.floor(so / 1000);
        so = so % 1000;
        if (nghin > 0) {
            chuoi += docblock(nghin, daydu) + " nghìn";
            daydu = true;
        }
        if (so > 0) {
            chuoi += docblock(so, daydu);
        }
        return chuoi;
    }

    function docso(so) {
        var dau = 0;
        if (so == 0) return mangso[0];
        if (so < 0) { so = so * -1; dau = 1; }
        var chuoi = "",
            hauto = "";
        do {
            ty = so % 1000000000;
            so = Math.floor(so / 1000000000);
            if (so > 0) {
                chuoi = dochangtrieu(ty, true) + hauto + chuoi;
            } else {
                chuoi = dochangtrieu(ty, false) + hauto + chuoi;
            }
            hauto = " tỷ";
        } while (so > 0);
        if (dau == 1) { chuoi = "âm" + chuoi; }
        chuoi = chuoi + " đồng";
        return chuoi;
    }
    i = 0;
    $(document).ready(function () {

        $("#change").keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 109, 189]) !== -1 ||
                // Allow: Ctrl/cmd+A
                (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: Ctrl/cmd+C
                (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: Ctrl/cmd+X
                (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||
                // Allow: home, end, left, right
                (e.keyCode >= 35 && e.keyCode <= 39)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
            if (parseInt($(this).val()) >= 100000000) { e.preventDefault(); }
            if (parseInt($(this).val()) <= -100000000) { e.preventDefault(); }
        });

        $("#change").keyup(function () {
            $("#money").text(docso($(this).val()));
        });
    });
</script>
<h2>Thực hiện giao dịch</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div>
        <hr />
        @Html.HiddenFor(model => model.UserID)
        @Html.HiddenFor(model => model.Name)
        @Html.HiddenFor(model => model.UserName)
        @Html.HiddenFor(model => model.UserType)
        @Html.HiddenFor(model => model.UserTypeName)
        @Html.HiddenFor(model => model.Balance)

        <dl class="dl-horizontal">
            <dt>
                @TranString.Account :
            </dt>
            <dd>
                @Html.DisplayFor(model => model.UserName)
            </dd>
            <dt>
                @TranString.Name :
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Name)
            </dd>
            <dt>
            <dt>
                @TranString.UserType :
            </dt>
            <dd>
                @Html.DisplayFor(model => model.UserTypeName)
            </dd>
            <dt>
                @TranString.Balance :
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Balance)
                đồng
            </dd>

            <dt>
                @TranString.TransAmount :
            </dt>
            <dd>
                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @id = "change" , @Value="", onDrag = "return false", onDrop = "return false", onPaste = "return false", autocomplete = "off" } }) 
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </dd>
            <dt>
            </dt>
            <dd>
                <span id="money">  </span>
            </dd>
            <dt>
            </dt>
            <dd>
                @TranString.Note
            </dd>
            <dt>
                @TranString.Content :
            </dt>
            <dd>
                @Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </dd>
            <dt>
            </dt>
            <dd>
                <div style="font-weight: bold; color: red;">@ViewBag.message</div>
            </dd>
            <dt>
            </dt>
            <dd>
                <br />
            </dd>
            <dt>
            </dt>
            <dd>
                <input type="submit" value="@TranString.CreateButton" class="btn" />
            </dd>
            <dt>
            </dt>
            <dd>
                <br />
            </dd>
            <dt>
            </dt>
            <dd>
                @Html.ActionLink(TranString.Back, "Search", new { area = "" }, new { @class = "btn btn-info" })
            </dd>
        </dl>
    </div>
    
    
    @*<div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="@TranString.UpdateButton" class="btn" />
            
        </div>
    </div>*@
}

@*<div class="col-lg-5">
    <div class="col-lg-offset-4">
        @Html.ActionLink(TranString.BackToList, "Search", new { area = "" }, new { @class = "btn btn-info" })
    </div>
</div>*@



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}